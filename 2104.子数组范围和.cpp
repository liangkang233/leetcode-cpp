/*
 * @lc app=leetcode.cn id=2104 lang=cpp
 *
 * [2104] 子数组范围和
 */

#include <iostream>
#include <vector>
#include <stack>
using namespace std;

// https://leetcode-cn.com/problems/sum-of-subarray-ranges/solution/gong-shui-san-xie-yi-ti-san-jie-qu-jian-wn84z/
// 假设有m个区间，最终的表达式为m个等式max-min之和。
// 若某个nums[i],如果在这ki个区间中充当最大值,则在最终等式中以max的形式出现k1次，
// 如果在k2个区间中充当最小值，则在最终等式中以min形式出现k2次。
// 因此我们可以统计每个nums[]成为区间最大值的次数k1和成为区间最小值的次数k2, (k1 - k2) * nums[i]为numsi对于最终答案的贡献。

// 考虑如何统计每个nums[i]成为区间最值的次数:
// nums[i]作为区间最大值的次数:找到nums[i]左右最近一个不满足 「小于等于nums[间」的位置，记
// 其为p和q。此时区间左端点共有i- p个选择，区间右端点共有q-i个选择，根据乘法原理，区间个数为(i- p)*(q-i)个;
// nums[i]作为区间最小值的次数:同理，找到numsi左右最近一个不满足 「大于等于nums[i]J的位置，记其为p和q,区间个数为(i-p)*(q-i)个。
// 即问题切换为:使用「单调栈J找到某个nums[il的左边/右边的最近一个符合 某种性质的位置，从而知道
// nums[i]作为区间最值时，左右端点的可选择个数，再结合乘法原理知道nums[i]能够作为区间最值的区间
// 个数，从而知道numsi对答案的贡献。

// 值得注意的是，由于nums[i]存在相同元素，因此上述两边均取等号的做法会导致某些区间被重复计算，因
// 此我们可以令最近右端点的部分不取等号,确保区间统计不重不漏。

//// 重要！为了不重复 与minLeft 相对应的是minRight 一个为> 一个为>= 都是从栈底到top为递增的
//// 由于minRight换了方向 计入单调栈符号要相反 所以为 出栈判断 >=


// 对于数组 [..., 3, 5,6,7,4,1,2]
// 要计算数字5的「右侧比5小的第一个数」的时候
// 需要关注的只有 [6,4,1] 这三个数，也就是单调栈。
// 由于6比5大，所以将6出栈，变成 [4,1]，于是找到了，4就是「比5小的右侧第一个数」
// 然后将5入栈，变成 [5,4,1]
// 然后继续计算5左边的3的「右侧第一个更小的数」，此时需要考虑的栈是[5,4,1]
// 依次将5, 4出栈，栈变成了[1]，终于比3小了，1就是比3小的右侧第一个数。然后将3入栈，变成[3, 1]，再继续往左。
// 即，计算「右侧比nums[i]小的第一个数」的时候，要从右往左算。

// @lc code=start
class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
        int n = nums.size();
        vector<int> minLeft(n), minRight(n), maxLeft(n), maxRight(n);
        // minLeft[i]为i做区间最小值的最左边区间的下标 其他同理
        stack<int> minStack, maxStack;
        // 寻找数的左边的最大最小可能值 推入栈
        for (int i = 0; i < n; i++) {
            while (!minStack.empty() && nums[minStack.top()] > nums[i])
                minStack.pop();
            minLeft[i] = minStack.empty() ? -1 : minStack.top();
            minStack.push(i);
            while (!maxStack.empty() && nums[maxStack.top()] <= nums[i])
                maxStack.pop();
            maxLeft[i] = maxStack.empty() ? -1 : maxStack.top();
            maxStack.push(i);
        }
        minStack = stack<int>();
        maxStack = stack<int>();
        for (int i = n - 1; i >= 0; i--) {
            while (!minStack.empty() && nums[minStack.top()] >= nums[i])
                minStack.pop();
            minRight[i] = minStack.empty() ? n : minStack.top();
            minStack.push(i);
            while (!maxStack.empty() && nums[maxStack.top()] < nums[i])
                maxStack.pop();
            maxRight[i] = maxStack.empty() ? n : maxStack.top();
            maxStack.push(i);
        }

        long long sumMax = 0, sumMin = 0;
        for (int i = 0; i < n; i++) {
            sumMax += static_cast<long long>(maxRight[i] - i) * (i - maxLeft[i]) * nums[i];
            sumMin += static_cast<long long>(minRight[i] - i) * (i - minLeft[i]) * nums[i];
        }
        return sumMax - sumMin;
    }
};
// @lc code=end

// [1, 3, 3]\n
// [1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3]\n
// [36155,-89027,-76206,9567,-38387,33980,-67266,21501,-57723,-59504,-42822,20063,-54066,-65611,-45261,19017,61861,55230,3665,-1536,60146,-60417,-41585,-6850,68108,92329,48036,-36927,26011,25629,-24938,-10950,27949,-94184,-15662,-26603,-93303,-46276,92338,1227,-54527,-25967,-86284,32082,67616,-8728,83260,80447,-68237,35744,9400,-30279,25713,90928,22658,34542,-34438,20973,-54425,-12992,-19447,58698,91581,-54630,-97997,-8224,-17810,82353,-30969,75951,-16272,-82206,-51215,18727,14839,38287,-15166,47972,-89317,-50614,-99002,26876,-15680,59255,-77129,-36677,10449,-14761,-39007,6061,10827,75683,82662,-87786,-84129,61786,-61879,-20600,93738,44672,-9255,-70648,39340,-25064,-88074,-61719,-77532,-17792,39990,-72145,13992,-66896,54780,-57553,56735,83781,13344,-4044,11471,36455,10329,-82367,-42450,34883,61612,88105,-63630,36749,52983,-4954,22040,41495,-85024,18484,15263,-60820,-42763,77536,-17406,-78304,80987,22214,-24631,76910,82074,43810,-10598,23150,-75227,-21075,74653,-6434,-14154,64833,71095,-21095,-52507,2513,50351,36705,-89080,-88428,88200,-42693,40425,9038,16730,-61844,-33509,-515,12023,79036,-57680,-34166,-24254,4067,-62959,-94312,36277,19865,27397,-8264,-93967,-49919,24456,-63722,12402,-77926,93099,66572,81423,5987,76159,-87076,1347,-9640,33209,-54379,-13600,25184,-55756,-61423,90611,-32407,-99319,-41263,54851,-78364,42326,-42861,23256,-89983,85675,20367,18441,-93141,4593,-71004,69263,94579,83836,-85017,-87671,-31789,97795,-61263,76182,37409,83753,-65076,32500,-63735,35718,87775,-77568,-6013,-46384,9887,22743,-55231,3498,45585,92031,6867,40768,-47415,-52184,-89564,21406,70622,39031,-69011,-11537,80161,-23031,-52055,-31420,-75457,-32670,-28641,-36533,-16421,35200,-63339,76464,75837,-99912,91195,-9001,-1203,99845,-44206,80205,-2869,327,-12771,-60966,68447,-93617,13371,-86148,-67212,-98895,43276,48923,86738,-46741,-72536,68648,-52213,-90952,84410,33820,-18697,-74681,48293,-71003,-13529,-80256,-5401,75827,-19103,-40672,-71904,99271,-89171,64002,-77007,61884,82380,-42312,-18187,33523,63471,-81480,-50509,31441,15536,-11254,-68886,-20092,-78075,-32327,-47179,73111,-31094,-14594,66473,61425,-17125,-91567,-70973,86649,-29533,-32627,-68301,-48113,-82477,78539,-77268,9887,-29848,-81040,49303,-7429,-78368,-45070,77400,-63765,254,-67446,-40638,-90981,94567,-37483,57826,19674,-32494,-27943,-94395,34749,7235,-64167,-98413,-35110,36986,-3611,-69418,91223,-55962,-32369,-77237,-1400,-28806,-61858,-45283,-75025,5493,-91102,97973,53300,-91641,49664,66033,-62586,12640,-18873,43798,5015,-20016,-79640,57502,-18974,-98782,85327,-99702,5631,79344,-59157,89160,-8012,31007,80843,-55937,-52953,94561,-88332,59801,53719,-2650,23350,-84198,-6274,-11354,-67889,34995,-32343,-64592,-6791,26090,33899,-95501,-91226,47195,44011,1821,-7483,81536,-53946,26718,-12601,94549,26085,14677,-93229,-56406,-61504,-89486,87712,39716,-94638,-37367,-57881,-17668,-64040,-71540,-54794,-78476,-93897,-98406,-30930,72968,16266,-79091,-10559,-37677,-13862,-38975,-17168,29377,-21133,4750,-96224,62495,31313,69253,47720,-1885,-22196,54164,-22900,-25081,-87760,26308,-53450,86978,1906,47344,-19283,63933,-23896,50771,-71518,-75841,54576,-15259,-42026,-41123,82683,-50256,-39242,64512,53538,61891,1949,-89576,11270,89146,-22552,55044,-95878,88303,-20182,72298,40278,-24457,-40621,-10738,37366,50933,-65611,-97365,-68533,-85050,25853,78097,56440,58260,70640,65023,10339,70804,-47668,92861,-14915,79020,56521,22657,-16559,-90021,88743,-45020,-51924,66478,34415,49137,23539,32597,90451,-23560,-85170,70949,-44049,84078,32547,32781,17906,-92954,-43384,-83775,83256,65252,-7921,40783,-40681,59503,52675,-70487,-97438,-87690,-6334,49924,-32916,-89687,59693,-53262,42785,-62582,41662,-40264,-20877,-26477,46750,64711,-32903,-2532,41458,334,72600,-55474,-93439,-59911,79746,-45501,-13076,-91549,-31372,-32194,-33885,13745,80555,86400,77261,51394,-36059,85177,-22791,-16219,12109,-90108,56962,-91563,375,-41408,6392,-46594]\n

class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
        long long ans = 0;
        // 时间复杂度 n-1 + n-2 + .... 1 = n*(n-1)/2 => O(n^2)
        // 直接暴力做会超时 得优化
        for (int head = 0; head < nums.size() - 1; head++) {
            int maxArr = nums[head], minArr = nums[head];
            for (int tail = head + 1; tail < nums.size(); tail++) {
                maxArr = max(maxArr, nums[tail]);
                minArr = min(minArr, nums[tail]);
                cout << maxArr << " " << minArr << endl;
                ans += maxArr - minArr;
            }
        }
        return ans;
    }
};